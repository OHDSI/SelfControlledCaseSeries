// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// convertToSccs
void convertToSccs(const DataFrame& cases, const DataFrame& outcomes, const List& eras, const bool includeAge, const int ageOffset, const NumericMatrix& ageDesignMatrix, const bool includeSeason, const bool includeCalendarTime, const int calendarTimeOffset, const NumericMatrix& calendarTimeDesignMatrix, const NumericMatrix& seasonDesignMatrix, const NumericVector& timeCovariateCases, const List& covariateSettingsList, const int endOfObservationEraLength, const int endOfObservationCovariateId, const bool eventDependentObservation, const List& censorModel, const bool scri, const int64_t controlIntervalId, const S4 resultAndromeda);
RcppExport SEXP _SelfControlledCaseSeries_convertToSccs(SEXP casesSEXP, SEXP outcomesSEXP, SEXP erasSEXP, SEXP includeAgeSEXP, SEXP ageOffsetSEXP, SEXP ageDesignMatrixSEXP, SEXP includeSeasonSEXP, SEXP includeCalendarTimeSEXP, SEXP calendarTimeOffsetSEXP, SEXP calendarTimeDesignMatrixSEXP, SEXP seasonDesignMatrixSEXP, SEXP timeCovariateCasesSEXP, SEXP covariateSettingsListSEXP, SEXP endOfObservationEraLengthSEXP, SEXP endOfObservationCovariateIdSEXP, SEXP eventDependentObservationSEXP, SEXP censorModelSEXP, SEXP scriSEXP, SEXP controlIntervalIdSEXP, SEXP resultAndromedaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type cases(casesSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type outcomes(outcomesSEXP);
    Rcpp::traits::input_parameter< const List& >::type eras(erasSEXP);
    Rcpp::traits::input_parameter< const bool >::type includeAge(includeAgeSEXP);
    Rcpp::traits::input_parameter< const int >::type ageOffset(ageOffsetSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type ageDesignMatrix(ageDesignMatrixSEXP);
    Rcpp::traits::input_parameter< const bool >::type includeSeason(includeSeasonSEXP);
    Rcpp::traits::input_parameter< const bool >::type includeCalendarTime(includeCalendarTimeSEXP);
    Rcpp::traits::input_parameter< const int >::type calendarTimeOffset(calendarTimeOffsetSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type calendarTimeDesignMatrix(calendarTimeDesignMatrixSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type seasonDesignMatrix(seasonDesignMatrixSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type timeCovariateCases(timeCovariateCasesSEXP);
    Rcpp::traits::input_parameter< const List& >::type covariateSettingsList(covariateSettingsListSEXP);
    Rcpp::traits::input_parameter< const int >::type endOfObservationEraLength(endOfObservationEraLengthSEXP);
    Rcpp::traits::input_parameter< const int >::type endOfObservationCovariateId(endOfObservationCovariateIdSEXP);
    Rcpp::traits::input_parameter< const bool >::type eventDependentObservation(eventDependentObservationSEXP);
    Rcpp::traits::input_parameter< const List& >::type censorModel(censorModelSEXP);
    Rcpp::traits::input_parameter< const bool >::type scri(scriSEXP);
    Rcpp::traits::input_parameter< const int64_t >::type controlIntervalId(controlIntervalIdSEXP);
    Rcpp::traits::input_parameter< const S4 >::type resultAndromeda(resultAndromedaSEXP);
    convertToSccs(cases, outcomes, eras, includeAge, ageOffset, ageDesignMatrix, includeSeason, includeCalendarTime, calendarTimeOffset, calendarTimeDesignMatrix, seasonDesignMatrix, timeCovariateCases, covariateSettingsList, endOfObservationEraLength, endOfObservationCovariateId, eventDependentObservation, censorModel, scri, controlIntervalId, resultAndromeda);
    return R_NilValue;
END_RCPP
}
// simulateSccsOutcomes
List simulateSccsOutcomes(const DataFrame& cases, const DataFrame& eras, const std::vector<double> baselineRates, const DataFrame& eraRrs, const bool includeAgeEffect, const int ageOffset, const std::vector<double> ageRrs, const bool includeSeasonality, const std::vector<double> seasonRrs, const bool includeCalendarTimeEffect, const Date& minCalendarTime, const std::vector<double> calendarTimeRrs);
RcppExport SEXP _SelfControlledCaseSeries_simulateSccsOutcomes(SEXP casesSEXP, SEXP erasSEXP, SEXP baselineRatesSEXP, SEXP eraRrsSEXP, SEXP includeAgeEffectSEXP, SEXP ageOffsetSEXP, SEXP ageRrsSEXP, SEXP includeSeasonalitySEXP, SEXP seasonRrsSEXP, SEXP includeCalendarTimeEffectSEXP, SEXP minCalendarTimeSEXP, SEXP calendarTimeRrsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type cases(casesSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type eras(erasSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type baselineRates(baselineRatesSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type eraRrs(eraRrsSEXP);
    Rcpp::traits::input_parameter< const bool >::type includeAgeEffect(includeAgeEffectSEXP);
    Rcpp::traits::input_parameter< const int >::type ageOffset(ageOffsetSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type ageRrs(ageRrsSEXP);
    Rcpp::traits::input_parameter< const bool >::type includeSeasonality(includeSeasonalitySEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type seasonRrs(seasonRrsSEXP);
    Rcpp::traits::input_parameter< const bool >::type includeCalendarTimeEffect(includeCalendarTimeEffectSEXP);
    Rcpp::traits::input_parameter< const Date& >::type minCalendarTime(minCalendarTimeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type calendarTimeRrs(calendarTimeRrsSEXP);
    rcpp_result_gen = Rcpp::wrap(simulateSccsOutcomes(cases, eras, baselineRates, eraRrs, includeAgeEffect, ageOffset, ageRrs, includeSeasonality, seasonRrs, includeCalendarTimeEffect, minCalendarTime, calendarTimeRrs));
    return rcpp_result_gen;
END_RCPP
}
// testEwad
double testEwad(std::vector<double> p, double present, double astart, double aend, double start, double end);
RcppExport SEXP _SelfControlledCaseSeries_testEwad(SEXP pSEXP, SEXP presentSEXP, SEXP astartSEXP, SEXP aendSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type present(presentSEXP);
    Rcpp::traits::input_parameter< double >::type astart(astartSEXP);
    Rcpp::traits::input_parameter< double >::type aend(aendSEXP);
    Rcpp::traits::input_parameter< double >::type start(startSEXP);
    Rcpp::traits::input_parameter< double >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(testEwad(p, present, astart, aend, start, end));
    return rcpp_result_gen;
END_RCPP
}
// testEwid
double testEwid(std::vector<double> p, double present, double astart, double aend, double start, double end);
RcppExport SEXP _SelfControlledCaseSeries_testEwid(SEXP pSEXP, SEXP presentSEXP, SEXP astartSEXP, SEXP aendSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type present(presentSEXP);
    Rcpp::traits::input_parameter< double >::type astart(astartSEXP);
    Rcpp::traits::input_parameter< double >::type aend(aendSEXP);
    Rcpp::traits::input_parameter< double >::type start(startSEXP);
    Rcpp::traits::input_parameter< double >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(testEwid(p, present, astart, aend, start, end));
    return rcpp_result_gen;
END_RCPP
}
// testEgad
double testEgad(std::vector<double> p, double present, double astart, double aend, double start, double end);
RcppExport SEXP _SelfControlledCaseSeries_testEgad(SEXP pSEXP, SEXP presentSEXP, SEXP astartSEXP, SEXP aendSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type present(presentSEXP);
    Rcpp::traits::input_parameter< double >::type astart(astartSEXP);
    Rcpp::traits::input_parameter< double >::type aend(aendSEXP);
    Rcpp::traits::input_parameter< double >::type start(startSEXP);
    Rcpp::traits::input_parameter< double >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(testEgad(p, present, astart, aend, start, end));
    return rcpp_result_gen;
END_RCPP
}
// testEgid
double testEgid(std::vector<double> p, double present, double astart, double aend, double start, double end);
RcppExport SEXP _SelfControlledCaseSeries_testEgid(SEXP pSEXP, SEXP presentSEXP, SEXP astartSEXP, SEXP aendSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type present(presentSEXP);
    Rcpp::traits::input_parameter< double >::type astart(astartSEXP);
    Rcpp::traits::input_parameter< double >::type aend(aendSEXP);
    Rcpp::traits::input_parameter< double >::type start(startSEXP);
    Rcpp::traits::input_parameter< double >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(testEgid(p, present, astart, aend, start, end));
    return rcpp_result_gen;
END_RCPP
}
// computeCorrections
std::vector<double> computeCorrections(const DataFrame& cases, const DataFrame& monthAdjustments);
RcppExport SEXP _SelfControlledCaseSeries_computeCorrections(SEXP casesSEXP, SEXP monthAdjustmentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type cases(casesSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type monthAdjustments(monthAdjustmentsSEXP);
    rcpp_result_gen = Rcpp::wrap(computeCorrections(cases, monthAdjustments));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SelfControlledCaseSeries_convertToSccs", (DL_FUNC) &_SelfControlledCaseSeries_convertToSccs, 20},
    {"_SelfControlledCaseSeries_simulateSccsOutcomes", (DL_FUNC) &_SelfControlledCaseSeries_simulateSccsOutcomes, 12},
    {"_SelfControlledCaseSeries_testEwad", (DL_FUNC) &_SelfControlledCaseSeries_testEwad, 6},
    {"_SelfControlledCaseSeries_testEwid", (DL_FUNC) &_SelfControlledCaseSeries_testEwid, 6},
    {"_SelfControlledCaseSeries_testEgad", (DL_FUNC) &_SelfControlledCaseSeries_testEgad, 6},
    {"_SelfControlledCaseSeries_testEgid", (DL_FUNC) &_SelfControlledCaseSeries_testEgid, 6},
    {"_SelfControlledCaseSeries_computeCorrections", (DL_FUNC) &_SelfControlledCaseSeries_computeCorrections, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_SelfControlledCaseSeries(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
