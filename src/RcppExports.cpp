// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// convertToSccs
List convertToSccs(const List& cases, const List& eras, double outcomeId, int naivePeriod, bool firstOutcomeOnly, bool includeAge, int ageOffset, NumericMatrix ageDesignMatrix, bool includeSeason, NumericMatrix seasonDesignMatrix, List& covariateSettingsList);
RcppExport SEXP SelfControlledCaseSeries_convertToSccs(SEXP casesSEXP, SEXP erasSEXP, SEXP outcomeIdSEXP, SEXP naivePeriodSEXP, SEXP firstOutcomeOnlySEXP, SEXP includeAgeSEXP, SEXP ageOffsetSEXP, SEXP ageDesignMatrixSEXP, SEXP includeSeasonSEXP, SEXP seasonDesignMatrixSEXP, SEXP covariateSettingsListSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type cases(casesSEXP);
    Rcpp::traits::input_parameter< const List& >::type eras(erasSEXP);
    Rcpp::traits::input_parameter< double >::type outcomeId(outcomeIdSEXP);
    Rcpp::traits::input_parameter< int >::type naivePeriod(naivePeriodSEXP);
    Rcpp::traits::input_parameter< bool >::type firstOutcomeOnly(firstOutcomeOnlySEXP);
    Rcpp::traits::input_parameter< bool >::type includeAge(includeAgeSEXP);
    Rcpp::traits::input_parameter< int >::type ageOffset(ageOffsetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ageDesignMatrix(ageDesignMatrixSEXP);
    Rcpp::traits::input_parameter< bool >::type includeSeason(includeSeasonSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type seasonDesignMatrix(seasonDesignMatrixSEXP);
    Rcpp::traits::input_parameter< List& >::type covariateSettingsList(covariateSettingsListSEXP);
    __result = Rcpp::wrap(convertToSccs(cases, eras, outcomeId, naivePeriod, firstOutcomeOnly, includeAge, ageOffset, ageDesignMatrix, includeSeason, seasonDesignMatrix, covariateSettingsList));
    return __result;
END_RCPP
}
// simulateSccsOutcomes
List simulateSccsOutcomes(const List& cases, const List& eras, const std::vector<double>& baselineRates, const List& eraRrs, bool includeAge, int ageOffset, std::vector<double> ageRrs, bool includeSeasonality, std::vector<double> seasonRrs);
RcppExport SEXP SelfControlledCaseSeries_simulateSccsOutcomes(SEXP casesSEXP, SEXP erasSEXP, SEXP baselineRatesSEXP, SEXP eraRrsSEXP, SEXP includeAgeSEXP, SEXP ageOffsetSEXP, SEXP ageRrsSEXP, SEXP includeSeasonalitySEXP, SEXP seasonRrsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type cases(casesSEXP);
    Rcpp::traits::input_parameter< const List& >::type eras(erasSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type baselineRates(baselineRatesSEXP);
    Rcpp::traits::input_parameter< const List& >::type eraRrs(eraRrsSEXP);
    Rcpp::traits::input_parameter< bool >::type includeAge(includeAgeSEXP);
    Rcpp::traits::input_parameter< int >::type ageOffset(ageOffsetSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type ageRrs(ageRrsSEXP);
    Rcpp::traits::input_parameter< bool >::type includeSeasonality(includeSeasonalitySEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type seasonRrs(seasonRrsSEXP);
    __result = Rcpp::wrap(simulateSccsOutcomes(cases, eras, baselineRates, eraRrs, includeAge, ageOffset, ageRrs, includeSeasonality, seasonRrs));
    return __result;
END_RCPP
}
